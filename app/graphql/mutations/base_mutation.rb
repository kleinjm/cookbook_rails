# frozen_string_literal: true

# GraphQL::Schema::RelayClassicMutation is an extension of
# GraphQL::Schema::Mutation with some defaults
#
# Mutations that extend this base class get some conventions added for free:
#
# - An argument called `clientMutationId` is _always_ added, but it's not passed
#   to the resolve method. The value is re-inserted to the response. (It's for
#   client libraries to manage optimistic updates.)
# - The mutation accepts one argument called `input`, `argument`s defined in
#   the mutation class are added to that input object, which is generated by
#   the mutation.
#
# These conventions were first specified by Relay Classic,
#   but they come in handy:
#
# - `clientMutationId` supports optimistic updates and cache rollbacks
#   on the client
# - using a single `input:` argument makes it easy to post whole JSON objects
#   to the mutation using one GraphQL variable (`$input`) instead of making
#   a separate variable for each argument.
module Mutations
  class BaseMutation < GraphQL::Schema::RelayClassicMutation
    # This is used for generating the `input: { ... }` object type
    input_object_class Types::BaseInputObject

    # No support for return_interfaces
    # See https://github.com/rmosolgo/graphql-ruby/issues/1837
    field :success, Boolean, null: false
    field :errors, [String], null: true

    protected

    def authorize_user
      return true if context[:current_user].present?

      raise GraphQL::ExecutionError, "User not signed in"
    end

    def authorize_for_object(model = object)
      authorize_user
      return true if model&.user == context[:current_user]

      raise GraphQL::ExecutionError, "Unauthorized to change this object"
    end

    def authorize_for_objects(models)
      authorize_user
      return true if models.pluck(:user_id).all? do |user_id|
        user_id == context[:current_user].id
      end

      raise GraphQL::ExecutionError, "Unauthorized to change all these objects"
    end
  end
end
